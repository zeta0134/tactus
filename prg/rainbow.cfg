MEMORY {
    ZEROPAGE:       start = $00,   size = $100,  type = rw;
    SHADOW_OAM:     start = $0200, size = $100,  type = rw;
    RAM:            start = $0300, size = $500,  type = rw;
    PRGRAM:         start = $6800, size = $1800,  type = rw;
    HDR:            start = $0000, size = $10,   type = ro, file = %O, fill = yes;

    # real program banks; notably these will be duplicated!
    PRG_00_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $00;
    PRG_01_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $01;
    PRG_02_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $02;
    PRG_FIXED_E000: start = $E000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $03;
    PRG_04_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $04;
    PRG_05_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $05;
    PRG_06_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $06;
    PRG_07_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $07;

    # blank memory region, sized to match program banks above
    # will be replaced with the alternate program in the final build
    BLANK_REGION:   start = $8000, size = $2000 * 8, type = ro, file = %O, fill = yes, fillval = $FF;

    # data banks; these are NOT duplicated. Make sure 2xPRG+1xDATA+1xDPCM is a power of 2! Do NOT put code in these!!
    DATA_00_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $10;
    DATA_01_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $11;
    DATA_02_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $12;
    DATA_03_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $13;
    DATA_04_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $14;
    DATA_05_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $15;
    DATA_06_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $16;
    DATA_07_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $17;
    DATA_08_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $18;
    DATA_09_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $19;
    DATA_0A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1A;
    DATA_0B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1B;
    DATA_0C_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1C;
    DATA_0D_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1D;
    DATA_0E_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1E;
    DATA_0F_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $1F;

    DATA_10_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $20;
    DATA_11_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $21;
    DATA_12_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $22;
    DATA_13_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $23;
    DATA_14_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $24;
    DATA_15_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $25;
    DATA_16_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $26;
    DATA_17_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $27;
    DATA_18_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $28;
    DATA_19_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $29;
    DATA_1A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $2A;
    DATA_1B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $2B;
    DATA_1C_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $2C;
    DATA_1D_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $2D;
    DATA_1E_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $2E;
    DATA_1F_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $2F;

    DATA_20_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $30;
    DATA_21_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $31;
    DATA_22_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $32;
    DATA_23_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $33;
    DATA_24_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $34;
    DATA_25_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $35;
    DATA_26_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $36;
    DATA_27_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $37;
    DATA_28_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $38;
    DATA_29_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $39;
    DATA_2A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $3A;
    DATA_2B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $3B;
    DATA_2C_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $3C;
    DATA_2D_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $3D;
    DATA_2E_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $3E;

    DPCM_00_C000:   start = $C000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, bank = $3F;

    CHR_ROM:      start = $0000, size = $100000, type = ro, file = %O, fill = yes, fillval = $00, bank = $00;
}

SEGMENTS {
   ZEROPAGE:  load = ZEROPAGE,  type = zp;
   BSS:        load = RAM,        type = bss, align = $100, define = yes;
   RAM:        load = RAM,        type = bss, start = $0300;
   PRGRAM:     load = PRGRAM,     type = bss, start = $6800;
   HEADER:     load = HDR,        type = ro,  align = $10;

   # Code banks for large bits of the engine that we want to track explicitly
   CODE_SOUND:    load = PRG_00_8000,       type = ro,  start = $8000;
   CODE_BHOP:     load = PRG_01_8000,       type = ro,  start = $8000;

   # Arbitrary code banks
   CODE_0:        load = PRG_02_8000,       type = ro,  start = $8000;
   CODE_1:        load = PRG_04_8000,       type = ro,  start = $8000;
   CODE_2:        load = PRG_05_8000,       type = ro,  start = $8000;
   CODE_3:        load = PRG_06_8000,       type = ro,  start = $8000;
   CODE_4:        load = PRG_07_8000,       type = ro,  start = $8000;

   DATA_0:        load = DATA_00_A000,       type = ro,  start = $A000;
   DATA_1:        load = DATA_01_A000,       type = ro,  start = $A000;
   DATA_2:        load = DATA_02_A000,       type = ro,  start = $A000;
   DATA_3:        load = DATA_03_A000,       type = ro,  start = $A000;
   DATA_4:        load = DATA_04_A000,       type = ro,  start = $A000;
   DATA_5:        load = DATA_05_A000,       type = ro,  start = $A000;
   DATA_6:        load = DATA_06_A000,       type = ro,  start = $A000;

   TORCHLIGHT_0:  load = DATA_07_A000,       type = ro,  start = $A000;
   TORCHLIGHT_1:  load = DATA_08_A000,       type = ro,  start = $A000;
   TORCHLIGHT_2:  load = DATA_09_A000,       type = ro,  start = $A000;
   TORCHLIGHT_3:  load = DATA_0A_A000,       type = ro,  start = $A000;
   TORCHLIGHT_4:  load = DATA_0B_A000,       type = ro,  start = $A000;
   TORCHLIGHT_5:  load = DATA_0C_A000,       type = ro,  start = $A000;
   TORCHLIGHT_6:  load = DATA_0D_A000,       type = ro,  start = $A000;
   TORCHLIGHT_7:  load = DATA_0E_A000,       type = ro,  start = $A000;
   TORCHLIGHT_8:  load = DATA_0F_A000,       type = ro,  start = $A000;
   TORCHLIGHT_9:  load = DATA_10_A000,       type = ro,  start = $A000;
   TORCHLIGHT_A:  load = DATA_11_A000,       type = ro,  start = $A000;

   DPCM_0:        load = DPCM_00_C000,       type = ro,  start = $C000;

   PRGFIXED_E000: load = PRG_FIXED_E000,  type = ro,  start = $E000;
   VECTORS:       load = PRG_FIXED_E000,  type = ro,  start = $FFFA;
   CHR_ROM:       load = CHR_ROM,         type = ro,  start = $0000;
}

SYMBOLS {
   __ZPCM_ADDRESS__:  type = weak, value = $4011;
   __BANK_MASK__:     type = weak, value = $07;
   __BANK_OFFSET__:   type = weak, value = $08;
}

FILES {
   %O:   format = bin;
}