MEMORY {
    ZEROPAGE:       start = $00,   size = $100,  type = rw, define = yes;
    RAM:            start = $0200, size = $600,  type = rw, define = yes;
    PRGRAM:         start = $6600, size = $1A00, type = rw, define = yes, bank = $00;
    EXTRA_RAM_1:    start = $A000, size = $2000, type = rw, define = yes, bank = $01;
    EXTRA_RAM_2:    start = $A000, size = $2000, type = rw, define = yes, bank = $02;
    EXTRA_RAM_3:    start = $A000, size = $2000, type = rw, define = yes, bank = $03;

    # Oops! The current dev board only supports 32 kB! We can't use these :(
    # EXTRA_RAM_4:    start = $A000, size = $2000, type = rw, define = yes, bank = $04;
    # EXTRA_RAM_5:    start = $A000, size = $2000, type = rw, define = yes, bank = $05;
    # EXTRA_RAM_6:    start = $A000, size = $2000, type = rw, define = yes, bank = $06;
    # EXTRA_RAM_7:    start = $A000, size = $2000, type = rw, define = yes, bank = $07;
    # EXTRA_RAM_8:    start = $A000, size = $2000, type = rw, define = yes, bank = $08;
    # EXTRA_RAM_9:    start = $A000, size = $2000, type = rw, define = yes, bank = $09;
    # EXTRA_RAM_A:    start = $A000, size = $2000, type = rw, define = yes, bank = $0A;
    # EXTRA_RAM_B:    start = $A000, size = $2000, type = rw, define = yes, bank = $0B;
    # EXTRA_RAM_C:    start = $A000, size = $2000, type = rw, define = yes, bank = $0C;
    # EXTRA_RAM_D:    start = $A000, size = $2000, type = rw, define = yes, bank = $0D;
    # EXTRA_RAM_E:    start = $A000, size = $2000, type = rw, define = yes, bank = $0E;
    # EXTRA_RAM_F:    start = $A000, size = $2000, type = rw, define = yes, bank = $0F;

    HDR:            start = $0000, size = $10,   type = ro, file = %O, fill = yes;

    # real program banks; notably these will be duplicated!
    PRG_00_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $00;
    PRG_01_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $01;
    PRG_02_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $02;
    PRG_FIXED_E000: start = $E000, size = $1FFA, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $03;
    VECTORS:        start = $FFFA, size =    $6, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $03;
    PRG_04_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $04;
    PRG_05_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $05;
    PRG_06_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $06;
    PRG_07_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $07;
    PRG_08_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $08;
    PRG_09_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $09;
    PRG_0A_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $0A;
    PRG_0B_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $0B;
    PRG_0C_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $0C;
    PRG_0D_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $0D;
    PRG_0E_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $0E;
    PRG_0F_8000:    start = $8000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $0F;

    # blank memory region, sized to match program banks above
    # will be replaced with the alternate program in the final build
    BLANK_REGION:   start = $8000, size = $2000 * 16, type = ro, file = %O, fill = yes, fillval = $FF;

    # data banks; these are NOT duplicated. Make sure 2xPRG+1xDATA+1xDPCM is a power of 2! Do NOT put code in these!!
    DATA_00_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $20;
    DATA_01_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $21;
    DATA_02_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $22;
    DATA_03_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $23;
    DATA_04_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $24;
    DATA_05_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $25;
    DATA_06_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $26;
    DATA_07_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $27;
    DATA_08_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $28;
    DATA_09_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $29;
    DATA_0A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $2A;
    DATA_0B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $2B;
    DATA_0C_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $2C;
    DATA_0D_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $2D;
    DATA_0E_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $2E;
    DATA_0F_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $2F;

    DATA_10_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $30;
    DATA_11_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $31;
    DATA_12_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $32;
    DATA_13_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $33;
    DATA_14_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $34;
    DATA_15_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $35;
    DATA_16_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $36;
    DATA_17_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $37;
    DATA_18_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $38;
    DATA_19_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $39;
    DATA_1A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $3A;
    DATA_1B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $3B;
    DATA_1C_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $3C;
    DATA_1D_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $3D;
    DATA_1E_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $3E;
    DATA_1F_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $3F;

    DATA_20_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $40;
    DATA_21_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $41;
    DATA_22_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $42;
    DATA_23_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $43;
    DATA_24_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $44;
    DATA_25_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $45;
    DATA_26_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $46;
    DATA_27_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $47;
    DATA_28_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $48;
    DATA_29_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $49;
    DATA_2A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $4A;
    DATA_2B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $4B;
    DATA_2C_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $4C;
    DATA_2D_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $4D;
    DATA_2E_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $4E;
    DATA_2F_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $4F;

    DATA_30_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $50;
    DATA_31_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $51;
    DATA_32_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $52;
    DATA_33_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $53;
    DATA_34_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $54;
    DATA_35_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $55;
    DATA_36_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $56;
    DATA_37_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $57;
    DATA_38_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $58;
    DATA_39_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $59;
    DATA_3A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $5A;
    DATA_3B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $5B;
    DATA_3C_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $5C;
    DATA_3D_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $5D;
    DATA_3E_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $5E;
    DATA_3F_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $5F;

    DATA_40_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $60;
    DATA_41_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $61;
    DATA_42_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $62;
    DATA_43_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $63;
    DATA_44_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $64;
    DATA_45_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $65;
    DATA_46_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $66;
    DATA_47_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $67;
    DATA_48_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $68;
    DATA_49_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $69;
    DATA_4A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $6A;
    DATA_4B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $6B;
    DATA_4C_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $6C;
    DATA_4D_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $6D;
    DATA_4E_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $6E;
    DATA_4F_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $6F;

    DATA_50_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $70;
    DATA_51_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $71;
    DATA_52_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $72;
    DATA_53_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $73;
    DATA_54_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $74;
    DATA_55_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $75;
    DATA_56_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $76;
    DATA_57_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $77;
    DATA_58_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $78;
    DATA_59_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $79;
    DATA_5A_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $7A;
    DATA_5B_A000:   start = $A000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $7B;

    DPCM_00_C000:   start = $C000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $7C;
    DPCM_01_C000:   start = $C000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $7D;
    DPCM_02_C000:   start = $C000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $7E;
    DPCM_03_C000:   start = $C000, size = $2000, type = ro, file = %O, fill = yes, fillval = $FF, define = yes, bank = $7F;

    CHR_ROM:      start = $0000, size = $100000, type = ro, file = %O, fill = yes, fillval = $00, define = yes, bank = $00;
}

SEGMENTS {
   ZEROPAGE:    load = ZEROPAGE,    type = zp;
   BSS:         load = RAM,         type = bss, align = $100, define = yes;
   RAM:         load = RAM,         type = bss, start = $0300;
   PRGRAM:      load = PRGRAM,      type = bss, start = $6800;
   LEVEL_RAM_0: load = EXTRA_RAM_1, type = bss, start = $A000;
   LEVEL_RAM_1: load = EXTRA_RAM_2, type = bss, start = $A000;
   LEVEL_RAM_2: load = EXTRA_RAM_3, type = bss, start = $A000;
   
   HEADER:      load = HDR,         type = ro,  align = $10;

   # Code banks for large bits of the engine that we want to track explicitly
   CODE_SOUND:    load = PRG_00_8000,       type = ro,  start = $8000;
   CODE_BHOP:     load = PRG_01_8000,       type = ro,  start = $8000;

   # Arbitrary code banks
   CODE_0:        load = PRG_02_8000,       type = ro;
   CODE_1:        load = PRG_04_8000,       type = ro;
   CODE_2:        load = PRG_05_8000,       type = ro;
   CODE_3:        load = PRG_06_8000,       type = ro;
   CODE_4:        load = PRG_07_8000,       type = ro;
   CODE_5:        load = PRG_08_8000,       type = ro;
   CODE_6:        load = PRG_09_8000,       type = ro;
   CODE_7:        load = PRG_0A_8000,       type = ro;
   CODE_8:        load = PRG_0B_8000,       type = ro;
   CODE_9:        load = PRG_0C_8000,       type = ro;
   CODE_A:        load = PRG_0D_8000,       type = ro;
   CODE_B:        load = PRG_0E_8000,       type = ro;
   CODE_C:        load = PRG_0F_8000,       type = ro;

   # Enemy Logic blocks, separated roughly by update type
   ENEMY_UPDATE:  load = PRG_0F_8000,       type = ro;
   ENEMY_ATTACK:  load = PRG_0E_8000,       type = ro;
   ENEMY_COLLIDE: load = PRG_0D_8000,       type = ro;
   ENEMY_UTIL:    load = PRG_0C_8000,       type = ro;

   DATA_0:        load = DATA_00_A000,       type = ro;
   DATA_1:        load = DATA_01_A000,       type = ro;
   DATA_2:        load = DATA_02_A000,       type = ro;
   DATA_3:        load = DATA_03_A000,       type = ro;
   DATA_4:        load = DATA_04_A000,       type = ro;
   DATA_5:        load = DATA_05_A000,       type = ro;
   DATA_6:        load = DATA_06_A000,       type = ro;
   DATA_7:        load = DATA_1E_A000,       type = ro;

   TORCHLIGHT_0:  load = DATA_07_A000,       type = ro;
   TORCHLIGHT_1:  load = DATA_08_A000,       type = ro;
   TORCHLIGHT_2:  load = DATA_09_A000,       type = ro;
   TORCHLIGHT_3:  load = DATA_0A_A000,       type = ro;
   TORCHLIGHT_4:  load = DATA_0B_A000,       type = ro;
   TORCHLIGHT_5:  load = DATA_0C_A000,       type = ro;
   TORCHLIGHT_6:  load = DATA_0D_A000,       type = ro;
   TORCHLIGHT_7:  load = DATA_0E_A000,       type = ro;
   TORCHLIGHT_8:  load = DATA_0F_A000,       type = ro;
   TORCHLIGHT_9:  load = DATA_10_A000,       type = ro;
   TORCHLIGHT_A:  load = DATA_11_A000,       type = ro;

   LEVEL_DATA_ROOMS_0:        load = DATA_12_A000,       type = ro;
   LEVEL_DATA_ROOMS_1:        load = DATA_13_A000,       type = ro;
   LEVEL_DATA_ROOMS_2:        load = DATA_14_A000,       type = ro;
   LEVEL_DATA_ROOMS_3:        load = DATA_15_A000,       type = ro;
   LEVEL_DATA_ROOMS_4:        load = DATA_16_A000,       type = ro;
   LEVEL_DATA_ROOMS_5:        load = DATA_17_A000,       type = ro;
   LEVEL_DATA_ROOMS_6:        load = DATA_18_A000,       type = ro;
   LEVEL_DATA_ROOMS_7:        load = DATA_19_A000,       type = ro;

   LEVEL_DATA_MAZE_LAYOUTS_0: load = DATA_1A_A000,       type = ro;
   LEVEL_DATA_MAZE_LAYOUTS_1: load = DATA_1B_A000,       type = ro;

   LEVEL_DATA_STRUCTURES_0:  load = DATA_1C_A000,       type = ro;
   LEVEL_DATA_STRUCTURES_1:  load = DATA_1D_A000,       type = ro;

   MUSIC_0:       load = DATA_40_A000,       type = ro;
   MUSIC_1:       load = DATA_41_A000,       type = ro;
   MUSIC_2:       load = DATA_42_A000,       type = ro;
   MUSIC_3:       load = DATA_43_A000,       type = ro;
   MUSIC_4:       load = DATA_44_A000,       type = ro;
   MUSIC_5:       load = DATA_45_A000,       type = ro;
   MUSIC_6:       load = DATA_46_A000,       type = ro;
   MUSIC_7:       load = DATA_47_A000,       type = ro;

   DPCM_0:        load = DPCM_00_C000,    type = ro,  start = $C000;
   DPCM_1:        load = DPCM_01_C000,    type = ro,  start = $C000;
   DPCM_2:        load = DPCM_02_C000,    type = ro,  start = $C000;
   DPCM_3:        load = DPCM_03_C000,    type = ro,  start = $C000;

   PRGFIXED_E000: load = PRG_FIXED_E000,  type = ro,  start = $E000;
   VECTORS:       load = VECTORS,         type = ro,  start = $FFFA;
   CHR_ROM:       load = CHR_ROM,         type = ro,  start = $0000;
}

SYMBOLS {
   __ZPCM_ADDRESS__:  type = weak, value = $4011;
   __BANK_MASK__:     type = weak, value = $0F;
   __BANK_OFFSET__:   type = weak, value = $10;
}

FILES {
   %O:   format = bin;
}